// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  decks         Deck[]
  role          Role      @default(USER)
  favourites    FavouriteDecksOnUsers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id            String         @id
  name          String
  type          Type
  affinity      Affinity
  exclusive     Boolean
  rarity        Rarity
  cost          Int
  atk           Int?
  hp            Int?
  ability       String?
  creator       String?
  artist        String?
  tribe         String?
  realm         String?
  link          String         @unique
  release       DateTime?
  week          String?
  image         String
  state         Int?
  pools         Pool[]
  decks         CardsOnDecks[]
}

model Deck {
  id            String         @id @default(cuid())
  name          String
  description   String?
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  frontCard     String
  cards         CardsOnDecks[]
  hero          Hero?
  updatedAt     DateTime       @default(now())
  favouritedBy  FavouriteDecksOnUsers[]
  format        Format?
}

model CardsOnDecks {
  id                String @id @default(cuid())
  deck              Deck   @relation(fields: [deckId], references: [id])
  deckId            String
  card              Card?   @relation(fields: [cardId], references: [id])
  cardId            String?
  cardIdHistory     String
  count             Int
  affinityPenalty   Boolean
}

model FavouriteDecksOnUsers {
  user              User   @relation(fields: [userId], references: [id])
  userId            String
  deck              Deck   @relation(fields: [deckId], references: [id])
  deckId            String

  @@id([userId, deckId])
}

model Hero {
  id       Int       @id @default(autoincrement())
  name     String
  affinity Affinity?
  deckId   String?   @unique
  deck     Deck?     @relation(fields: [deckId], references: [id])
}

model Pool {
  id       Int    @id @default(autoincrement())
  name     String @unique
  custom   Boolean
  cards    Card[]
}

enum Role {
  USER
  ADMIN
}

enum Type {
  ACTION
  UNIT
}

enum Affinity {
  MIND
  STRENGTH
  SPIRIT
  NEUTRAL
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  LEGENDARY
  TOKEN
}

enum Format {
  STANDARD
  LEGACY
  CUSTOM
}